// Generated by CoffeeScript 1.6.3
(function() {
  if (window.pollChart == null) {
    window.pollChart = {};
  }

  window.pollChart.helpers = {
    get: function(key, fn) {
      return function(d) {
        var val;
        val = key ? d[key] : d;
        if (fn) {
          return fn(val);
        } else {
          return val;
        }
      };
    }
  };

}).call(this);
// Generated by CoffeeScript 1.6.3
(function() {
  if (window.pollChart == null) {
    window.pollChart = {};
  }

  window.pollChart.legend = function(_arg) {
    var colorKey, colorScale, data, el, g, holder, labelKey;
    colorScale = _arg.colorScale, el = _arg.el, data = _arg.data, labelKey = _arg.labelKey, colorKey = _arg.colorKey;
    if (colorKey == null) {
      colorKey = labelKey;
    }
    holder = d3.select("#legendplacement").append("div").attr("class", "legendHolder");
    g = holder.selectAll(".legend").data(data).enter().append("div").attr("class", "legend");
    g.append("span").style("background", function(d) {
      return colorScale(d[colorKey]);
    }).attr("class", "key");
    return g.append("span").text(function(d) {
      return d[labelKey];
    }).attr("class", "label");
  };

}).call(this);
// Generated by CoffeeScript 1.6.3
(function() {
  if (window.pollChart == null) {
    window.pollChart = {};
  }

window.pollChart.legend2 = function(_arg) {
    var colorKey, colorScale, data, el, g, getChecked, handler, holder, labelKey, valueKey;
    colorScale = _arg.colorScale, el = _arg.el, data = _arg.data, labelKey = _arg.labelKey, colorKey = _arg.colorKey, valueKey = _arg.valueKey, handler = _arg.handler;
    console.log(arguments);
    if (colorKey == null) {
      colorKey = labelKey;
    }
    if (handler == null) {
      handler = function() {};
    }
    getChecked = function() {
      data = _.compact(g.selectAll("input:checked").map(function(a) {
        var _ref, _ref1;
        return (_ref = a[0]) != null ? (_ref1 = _ref.__data__) != null ? _ref1[labelKey] : void 0 : void 0;
      }));
      if (data.length === 0) {
        this.checked = true;
        data = [this.__data__[labelKey]];
      }
      if (this.checked) {
        d3.select(this.parentNode).attr("class", "legend2").transition().duration(500).style("background-color", function(d) {
          return colorScale(d[colorKey]);
        });
      } else {
        d3.select(this.parentNode).attr("class", "legend2 disabled").transition().duration(500).style("background-color", "rgb(200,200,200)");
      }

      return draw(data);
    };
    holder = d3.select("#legendplacement").append("div").attr("class", "legendHolder");
    g = holder.selectAll(".legend2").data(data).enter().append("label").attr("class", "legend2").style("background-color", function(d) {
      return colorScale(d[colorKey]);
    });
    g.append("input").attr("type", "checkbox").attr("checked", "checked").on("change", getChecked);
/*    g.append("span").text(function(d) {
      return d[valueKey];
    }).attr("class", "value");*/
    return g.append("span").text(function(d) {
      return d[labelKey];
    }).attr("class", "label");
  };

}).call(this);
// Generated by CoffeeScript 1.6.3
(function() {
  if (window.pollChart == null) {
    window.pollChart = {};
  }

// Controls Pie Legend/Toggle
  window.pollChart.legend3 = function(_arg) {
    var colorKey, colorScale, data, el, g, getChecked, handler, holder, labelKey, switcher, valueKey;
    colorScale = _arg.colorScale, el = _arg.el, data = _arg.data, labelKey = _arg.labelKey, colorKey = _arg.colorKey, valueKey = _arg.valueKey, handler = _arg.handler;
    if (colorKey == null) {
      colorKey = labelKey;
    }
    if (handler == null) {
      handler = function() {};
    }

    getChecked = function() {
      var $this;
      $this = d3.select(this).select(".switcher");
      if ($this.attr("class").indexOf("active") === -1) {
        $this.attr("class", "switcher active");
        d3.select(this).attr("class", "legend2").transition().duration(500).style("background-color", function(d) {
          return colorScale(d[colorKey]); });
        $(this).find(".toggleText").empty().text("ON");
      } else {
        $this.attr("class", "switcher");
        d3.select(this).attr("class", "legend2 disabled").transition().duration(500).style("background-color", "rgb(87,87,87)");
        $(this).find(".toggleText").empty().text("OFF");
      }
      data = _.compact(g.selectAll(".active").map(function(a) {
        var _ref, _ref1;
        return (_ref = a[0]) != null ? (_ref1 = _ref.__data__) != null ? _ref1[labelKey] : void 0 : void 0;
      }));
      console.log("get checked data");
      console.log(data);
      return handler(data);
    }; //end of getChecked

    holder = d3.select("#legendplacement").append("div").attr("class", "legendHolder");
    g = holder.selectAll(".legend2").data(data).enter().append("label").attr("class", "legend2").style("background-color", function(d) {
      return colorScale(d[colorKey]);
    }).on("click", getChecked);
    switcher = g.append("div").attr("class", "switcher active");
    switcher.append("span").attr("class", "toggleText").text("ON"); //Controls ON/OFF switches for toggles.
    //switcher.append("span").attr("class", "text").text("OFF");
    //switcher.append("span").attr("class", "blackRect");
/*    g.append("span").text(function(d) {
      return d[valueKey];
    }).attr("class", "value");*/
    return g.append("span").text(function(d) {
      return d[labelKey];
    }).attr("class", "answer"); //Controls text for toggles.
  }; 

}).call(this);
// Generated by CoffeeScript 1.6.3
(function() {
  if (window.pollChart == null) {
    window.pollChart = {};
  }

  window.pollChart.tooltip = function(parent, selection, getter) {
    var tooltip, tooltipMove, tooltipOut, tooltipOver;
    tooltip = d3.select('body').append("div").attr("class", "tooltip").style("opacity", 0);
    tooltipOver = function(d) {
      d3.select(this).style({
        "opacity": 0.8
      });
      tooltip.transition().duration(200).style("opacity", 0.9);
      return tooltip.html(getter(d));
    };
    tooltipMove = function() {
      return tooltip.style("left", (d3.event.pageX + 10) + "px").style("top", (d3.event.pageY - 10) + "px");
    };
    tooltipOut = function() {
      d3.select(this).style({
        "opacity": 1
      });
      return tooltip.transition().duration(200).style("opacity", 0);
    };
    return selection.on("mouseover", tooltipOver).on("mouseout", tooltipOut).on("mousemove", tooltipMove);
  };

}).call(this);
// Generated by CoffeeScript 1.6.3
(function() {
  if (window.pollChart == null) {
    window.pollChart = {};
  }

  window.pollChart.tooltipBubble = function(parent, selection, getter) {
    var span, svg, tooltip, tooltipMove, tooltipOut, tooltipOver;
    tooltip = d3.select("body").append("div").attr("class", "tooltip").style("opacity", 0);
    span = tooltip.append("span");
    svg = tooltip.append("svg");
    svg.append("path").attr("class", "tooltip").attr("d", d3.svg.symbol("triangle-down"));
    tooltipOver = function(d) {
      d3.select(this).style({
        "opacity": 0.7
      });
      tooltip.transition().duration(200).style("opacity", 0);
      return span.html(getter(d));
    };
    tooltipMove = function() {
      return tooltip.style("left", (d3.event.layerX + 20) + "px").style("top", (d3.event.layerY - 10) + "px");
    };
    tooltipOut = function() {
      d3.select(this).style({
        "opacity": 1
      });
      return tooltip.transition().duration(200).style("opacity", 0);
    };
    return selection.on("mouseover", tooltipOver).on("mouseout", tooltipOut).on("mousemove", tooltipMove);
  };

}).call(this);

// Generated by CoffeeScript 1.6.3
/*

  Grid Chart

  Data should be of the form:
  [
    {question: "Some Question"
     answers: [
      {id: 1, label: "Some Answer", value:2000}
      {id: 2, label: "Some Answer2", value:400}
      {id: 3, label: "Some Answer3", value:500}
     chosen: 2
  ]
*/


(function() {
  var defaults;

  if (window.pollChart == null) {
    window.pollChart = {};
  }

  defaults = {
    height: 60,
    margin: {
      top: 0,
      right: 0,
      bottom: 30,
      left: 0
    },
    colors: ["#FFF5E4", "#FF7E65", "#7DCDFC", "#4a9acd", "#3D444B"],
    data: []
  };

  window.pollChart.grid = function(opts) {
    var answer, answers, chart, colors, data, el, get, getter, height, helpers, index, item, margin, pollChart, tooltip, width, _i, _j, _len, _len1, _ref;
    pollChart = window.pollChart;
    helpers = pollChart.helpers;
    get = helpers.get;
    // tooltip = pollChart.tooltip;
    opts = _.defaults(opts, defaults);
    if (opts.width == null) {
      opts.width = d3.select(opts.el).node().offsetWidth;
    }
    margin = opts.margin, width = opts.width, height = opts.height;
    width = width - margin.left - margin.right;
    height = height - margin.top - margin.bottom;
    colors = opts.colors;
    data = [];
    _ref = opts.data;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      answers = _.sortBy(item.answers, "value");
      for (index = _j = 0, _len1 = answers.length; _j < _len1; index = ++_j) {
        answer = answers[index];
        if (answer.id === item.chosen) {
          data.push({
            question: item.question,
            answer: answer.label,
            color: colors[index],
            question_id: item.question_id
          });
          break;
        }
      }
    }
    el = d3.select(opts.el);
    chart = el.selectAll(".gridSquare").data(data).enter().append("div").attr("class", "gridSquare").style("background", get("color"));
/*    getter = function(d) {
      return "Q. " + d.question + " <br />\nA. " + d.answer;
    };
    return tooltip(el, chart, getter);*/
  };

}).call(this);